"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDir = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const evalJsonObject = (source) => {
    return eval(`const a = ${source}; a`);
};
const readDir = async (dir, extensions, ignore) => {
    const cwd = process.cwd();
    const rootPath = node_path_1.default.join(cwd, dir);
    const files = await node_fs_1.default.promises.readdir(rootPath);
    const results = await Promise.all(files.filter(file => !ignore.includes(file)).map(async (file) => {
        const filePath = node_path_1.default.join(dir, file);
        const stats = await node_fs_1.default.promises.stat(filePath);
        if (stats.isDirectory()) {
            return {
                type: "directory",
                name: file,
                path: filePath,
                children: (await (0, exports.readDir)(filePath, extensions, ignore)).children
            };
        }
        else if (file.match(new RegExp(`\\.(${extensions.join("|")})$`))) {
            return {
                type: "file",
                name: file,
                path: filePath,
                content: await node_fs_1.default.promises.readFile(filePath, "utf-8")
            };
        }
        else if (file.match(new RegExp(`(tsconfig|jsconfig|package).json`))) {
            return {
                type: "config",
                name: file,
                path: filePath,
                config: evalJsonObject(await node_fs_1.default.promises.readFile(filePath, "utf-8"))
            };
        }
        else {
            return null;
        }
    }));
    const rootDirectory = {
        type: "directory",
        name: dir,
        path: rootPath,
        children: results.filter(Boolean)
    };
    return rootDirectory;
};
exports.readDir = readDir;
